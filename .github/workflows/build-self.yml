name: Build Telegram Android (Official Source)

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    # 1. Usa o runner auto-hospedado na Oracle Cloud ARM
    runs-on: [self-hosted, linux, ARM64]

    steps:
      # 2. Baixa o código do repositório
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # 3. Configura o ambiente Java (JDK) e o cache do Gradle
      - name: Set up JDK 17 # O projeto oficial do Telegram requer JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 4. Cria o arquivo local.properties para apontar para o SDK e NDK
      #    Esta é a forma mais explícita de informar ao Gradle onde encontrar as dependências.
      - name: Create local.properties
        run: |
          echo "sdk.dir=/usr/local/lib/android-sdk" > local.properties
          echo "ndk.dir=/usr/local/lib/android-sdk/ndk/26.1.10909125" >> local.properties
          echo "cmake.dir=/usr/bin" >> local.properties
          echo "--- local.properties content ---"
          cat local.properties

      # 5. Override NDK version in build.gradle
      # O NDK exigido (21.4.7075529) não está disponível para hosts ARM64.
      # Vamos forçar o uso de uma versão mais nova que é compatível.
      - name: Force newer NDK version
        run: |
          echo "Overriding NDK version in TMessagesProj/build.gradle..."
          sed -i 's/ndkVersion "21.4.7075529"/ndkVersion "26.1.10909125"/' TMessagesProj/build.gradle
          echo "Done. New version line:"
          grep 'ndkVersion' TMessagesProj/build.gradle

      # 8. Cria o arquivo google-services.json a partir dos segredos
      - name: Create google-services.json
        run: |
          echo "Creating google-services.json in TMessagesProj/"
          echo "${{ secrets.GOOGLE_SERVICES_BASE64 }}" | base64 --decode > TMessagesProj/google-services.json

      # 9. Cria o arquivo BuildVars.java com os segredos
      #    Caminho e nome de arquivo corrigidos para o projeto oficial
      - name: Inject secrets into BuildVars.java
        run: |
          sed -i "s|public static String APP_HASH = \".*\";|public static String APP_HASH = \"${{ secrets.API_HASH }}\";|g" TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
          sed -i "s|public static int APP_ID = .*;|public static int APP_ID = ${{ secrets.API_ID }};|g" TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
        shell: bash

      # 10. Decodifica e salva o arquivo keystore no local correto
      - name: Decode Keystore
        run: |
          mkdir -p TMessagesProj/config
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > TMessagesProj/config/release.keystore

      # 11. Garante CMake ARM64 do sistema no PATH
      - name: Install CMake
        run: |
          sudo apt-get update
          sudo apt-get install --yes cmake
          cmake --version

      # 12. Compila a versão de Release
      - name: Build Release APK
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=${{ github.workspace }}/TMessagesProj/config/release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.RELEASE_KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.RELEASE_KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.RELEASE_KEY_PASSWORD }}

      # 13. Cria uma Release em Rascunho e faz upload do APK
      - name: Create Draft Release with APKs
        uses: softprops/action-gh-release@v2
        with:
          # O token é necessário para autenticar na API do GitHub
          token: ${{ secrets.GITHUB_TOKEN }}
          # O nome da tag pode ser dinâmico
          tag_name: build-${{ github.run_number }}
          # O nome da Release
          name: Build ${{ github.run_number }} (${{ github.sha }})
          # A chave para manter a release privada!
          draft: true
          # Informa que é um pré-lançamento, opcional
          prerelease: true
          # Arquivos que serão anexados à release
          files: |
            TMessagesProj/build/outputs/apk/release/TMessagesProj-release.apk
