name: Build Telegram Android (Official Source)

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    # 1. Usa o runner auto-hospedado na Oracle Cloud ARM
    runs-on: self-hosted

    # Adiciona a especificação do container para rodar os passos em um ambiente x64 emulado
    container:
      image: eclipse-temurin:17-jdk-jammy # Imagem x64 com Ubuntu 22.04 e JDK 17
      platform: linux/amd64

    steps:
      # 2. Baixa o código do repositório
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # 3. Configura o cache do Gradle (o JDK 17 já vem na imagem do container)
      - name: Set up Gradle cache
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 4. Configura o NDK usando a action padrão (agora possível no container x64)
      - name: Set up NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26b # Mesma versão que era instalada manualmente

      # 5. Override NDK version in build.gradle
      # Forçamos o uso da versão do NDK que instalamos no passo anterior.
      - name: Force newer NDK version
        run: |
          sed -i 's/ndkVersion "21.4.7075529"/ndkVersion "26.1.10909125"/' TMessagesProj/build.gradle
          echo "Done. New version line:"
          grep 'ndkVersion' TMessagesProj/build.gradle

      # 8. Cria o arquivo google-services.json a partir dos segredos
      - name: Create google-services.json
        run: |
          echo "Creating google-services.json in TMessagesProj/"
          echo "${{ secrets.GOOGLE_SERVICES_BASE64 }}" | base64 --decode > TMessagesProj/google-services.json

      # 9. Cria o arquivo BuildVars.java com os segredos
      #    Caminho e nome de arquivo corrigidos para o projeto oficial
      - name: Inject secrets into BuildVars.java
        run: |
          sed -i "s|public static String APP_HASH = \".*\";|public static String APP_HASH = \"${{ secrets.API_HASH }}\";|g" TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
          sed -i "s|public static int APP_ID = .*;|public static int APP_ID = ${{ secrets.API_ID }};|g" TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
        shell: bash

      # 10. Decodifica e salva o arquivo keystore no local correto
      - name: Decode Keystore
        run: |
          mkdir -p TMessagesProj/config
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > TMessagesProj/config/release.keystore

      # 11. Concede permissão de execução para o gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 12. Exporta os segredos de assinatura como variáveis de ambiente
      # Esta é uma prática mais segura do que passá-los na linha de comando.
      - name: Set up signing secrets as environment variables
        run: |
          echo "SIGNING_STORE_FILE=${{ github.workspace }}/TMessagesProj/config/release.keystore" >> $GITHUB_ENV
          echo "SIGNING_STORE_PASSWORD=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "SIGNING_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> $GITHUB_ENV
          echo "SIGNING_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}" >> $GITHUB_ENV

      # 12. Compila a versão de Release
      - name: Build Release APK
        run: ./gradlew assembleRelease
        env:
          ORG_GRADLE_PROJECT_android_injected_signing_store_file: ${{ env.SIGNING_STORE_FILE }}
          ORG_GRADLE_PROJECT_android_injected_signing_store_password: ${{ env.SIGNING_STORE_PASSWORD }}
          ORG_GRADLE_PROJECT_android_injected_signing_key_alias: ${{ env.SIGNING_KEY_ALIAS }}
          ORG_GRADLE_PROJECT_android_injected_signing_key_password: ${{ env.SIGNING_KEY_PASSWORD }}

      # 13. Cria uma Release em Rascunho e faz upload do APK
      - name: Create Draft Release with APKs
        uses: softprops/action-gh-release@v2
        with:
          # O token é necessário para autenticar na API do GitHub
          token: ${{ secrets.GITHUB_TOKEN }}
          # O nome da tag pode ser dinâmico
          tag_name: build-${{ github.run_number }}
          # O nome da Release
          name: Build ${{ github.run_number }} (${{ github.sha }})
          # A chave para manter a release privada!
          draft: true
          # Informa que é um pré-lançamento, opcional
          prerelease: true
          # Arquivos que serão anexados à release
          files: |
            TMessagesProj/build/outputs/apk/release/TMessagesProj-release.apk
