name: Build Telegram Android (Official Source)

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Baixa o código do repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1.1. Cache do Gradle
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 2. Configura o ambiente Java (JDK)
      - name: Set up JDK 17 # O projeto oficial do Telegram requer JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 3. Cria o arquivo google-services.json a partir dos segredos
      - name: Create google-services.json
        run: |
          echo "Creating google-services.json in TMessagesProj/"
          echo "${{ secrets.GOOGLE_SERVICES_BASE64 }}" | base64 --decode > TMessagesProj/google-services.json

      # 4. Cria o arquivo BuildVars.java com os segredos
      #    Caminho e nome de arquivo corrigidos para o projeto oficial
      - name: Inject secrets into BuildVars.java
        run: |
          sed -i "s|public static String APP_HASH = \".*\";|public static String APP_HASH = \"${{ secrets.API_HASH }}\";|g" TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
          sed -i "s|public static int APP_ID = .*;|public static int APP_ID = ${{ secrets.API_ID }};|g" TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
        shell: bash

      # 5. Decodifica e salva o arquivo keystore no local correto
      - name: Decode Keystore
        run: |
          mkdir -p TMessagesProj/config
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > TMessagesProj/config/release.keystore

      # 6. Concede permissão de execução para o gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 8. Compila a versão de Release
      - name: Build Release APK
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=${{ github.workspace }}/TMessagesProj/config/release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.RELEASE_KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.RELEASE_KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.RELEASE_KEY_PASSWORD }}

      # 9. Cria uma Release em Rascunho e faz upload dos APKs
      - name: Create Draft Release with APKs
        uses: softprops/action-gh-release@v2
        with:
          # O token é necessário para autenticar na API do GitHub
          token: ${{ secrets.GITHUB_TOKEN }}
          # O nome da tag pode ser dinâmico
          tag_name: build-${{ github.run_number }}
          # O nome da Release
          name: Build ${{ github.run_number }} (${{ github.sha }})
          # A chave para manter a release privada!
          draft: true
          # Informa que é um pré-lançamento, opcional
          prerelease: true
          # Arquivos que serão anexados à release
          files: |
            TMessagesProj/build/outputs/apk/release/TMessagesProj-release.apk
